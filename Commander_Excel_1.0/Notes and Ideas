NOTES:

Ideas: Create a table-view javafx scene where the tableview will be populated by the elements of the 
user specified spreadsheet. Could be used as a preview feature, so after the user has specified their changes to the
excel sheet, display a tableview representation of the finished spreadsheet so the user can confirm that is what they want.


package com.sipios.scrapingarticle;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class Scraper {
    private static final String BASE_URL = "http://example.com/"; // The website's base url you want to scrape.
    private static final String MAIN_URL = "http://example.com/something"; // The website's precise page you want to scrape.

    // CSS query strings
    private static final String SECTOR_LINK_CSS_QUERY = "a.sector-data-table__sector-name-link";
    private static final String SECTOR_NAME_CSS_QUERY = ".sector-data-table__sector-row--selected a";
    private static final String SUB_SECTOR_NAME_CSS_QUERY = ".sector-data-table__industry-group-name";
    private static final String SUB_SECTOR_VALUE_CSS_QUERY = ".sector-data-table__industry-group-return";

    public static void main(String[] args) throws IOException {
        // Declare an object to store the sectors link
        ArrayList<String> stringLinksToSectors = new ArrayList<String>();

        // Use the chromedriver file at the root of this repository
        System.setProperty("webdriver.chrome.driver", "chromedriver");
        // Switch on the ChromeDriver
        ChromeDriver driver = new ChromeDriver();

        Document document;

        // Get and parse the html page behind the url http://example.com/markets/sectors
        document = Jsoup.connect(MAIN_URL).get();

        // Find all the elements with the CSS query a.sector-data-table__sector-name-link
        Elements linksToSector = document.select(SECTOR_LINK_CSS_QUERY);

        // If Jsoup failed because of some security check,
        // let's try with active scraping
        if (linksToSector.size() == 0) {
            driver.get(MAIN_URL);
            document = Jsoup.parse(driver.getPageSource());
            linksToSector = document.select(SECTOR_LINK_CSS_QUERY);
        }

        // If the active scraping failed, it means the page requires human interaction.
        // This will show a chrome window on your computer. Please follow the instructions
        // to prove you're a human to the webpage
        if (linksToSector.size() == 0) {
            driver.getScreenshotAs(OutputType.FILE);
        }

        // For all the specific sector link (skipping the first 'All Sectors' link at i=0
        for (int i = 1; i < linksToSector.size(); i++) {
            stringLinksToSectors.add(BASE_URL + linksToSector.get(i).attr("href"));
        }

        ScrapedData resultData = new ScrapedData();

        // For all the link scraped before
        for (int i = 0; i < stringLinksToSectors.size(); i++) {
            String linkToCurrentSector = stringLinksToSectors.get(i);
            // Load the page behind the URL
            driver.get(linkToCurrentSector);

            // Find the sector name, the sub-sectors names and values
            String sectorName = driver.findElementByCssSelector(SECTOR_NAME_CSS_QUERY).getText();
            List<WebElement> subSectorName = driver
                    .findElementsByCssSelector(SUB_SECTOR_NAME_CSS_QUERY);
            List<WebElement> subSectorValue = driver
                    .findElementsByCssSelector(SUB_SECTOR_VALUE_CSS_QUERY);

            // The next few lines fill an array of Performance object with the results founded by ChromeDriver
            ArrayList<Performance> values = new ArrayList<Performance>();
            for (int j = 0; j < subSectorName.size(); j++) {
                values.add(
                        new Performance(
                                subSectorName.get(j).getText(),
                                subSectorValue.get(j).getText()
                        )
                );
            }

            // Fill a sector object with the current Sector page data
            Sector currentFinancialCategory = new Sector(sectorName, values);
            resultData.getSectors().add(currentFinancialCategory);
        }
        ObjectMapper mapper = new ObjectMapper();
        // Save the data in a json file
        mapper.writeValue(new File("results.json"), resultData);

        // Shut down ChromeDriver instance if scraping was sucessful
        if (linksToSector.size() != 0) {
            driver.close();
            System.out.println("Success!");
        } else {
            System.out.println("Something went wrong, can you check the new Chrome window and see if it requires a human interaction ?");
        }
    }
}

comboBox.setItems(cBox);
		
		comboBox.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
		      @Override public void changed(ObservableValue<? extends String> selected, String cssMethod, String htmlMethod) {
		        if (cssMethod != null) {
		          switch(cssMethod) {
		            case "CSS Link Selectors":  appleImage.setVisible(false);  break;
		            case "HTML Elements": orangeImage.setVisible(false); break;
		           
		          }
		        }
		        if (htmlMethod != null) {
		          switch(htmlMethod) {
		            case "CSS Link Selectors":  appleImage.setVisible(true);   break;
		            case "HTML Elements": orangeImage.setVisible(true);  break; 
		           
		          }
		        }  
		      }
		    });
		    
		    
		    BuildpaneController.java
		    package com.commander.app;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import com.commander.app.model.Command;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Dialog;
import javafx.scene.control.Label;
import javafx.scene.control.TextInputDialog;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class BuildPaneController implements Initializable {

	private static int initCounter = 1;

	private ObservableList<String> cBox = FXCollections.observableArrayList("CSS Link Selectors", "HTML Elements");

	@FXML
	private ComboBox<String> comboBox;

	@FXML
	private Label label3;

	@FXML
	protected void handleOpenFile(ActionEvent event) {

		FileChooser fileChooser = new FileChooser();
		fileChooser.setTitle("Choose File To pull data from");
		fileChooser.getExtensionFilters().addAll((new FileChooser.ExtensionFilter(".csv", "*.csv")),
				new FileChooser.ExtensionFilter(".xlsx", "*.xlsx"));
		File userFile = fileChooser.showOpenDialog(new Stage(StageStyle.TRANSPARENT));

		Command command = new Command();
		command.setFileIn(userFile);

		TextInputDialog dialog = new TextInputDialog();
		dialog.setTitle("SuperCommand Builder");
		dialog.setHeaderText("Defining the attributes of the new SuperCommand");
		dialog.setContentText("What would you you like to name the new SuperCommand, this will be "
				+ "how you recall the command in the future.");
		dialog.showAndWait();

	}

	@FXML
	protected void handleOpenScrapper(ActionEvent event) throws IOException {

		comboBox.setVisible(true);

	}

	public static int getInitCounter() {
		return initCounter;
	}

	public static void setInitCounter(int initCounter) {
		BuildPaneController.initCounter = initCounter;
	}

	public Node getNestedPane(Scene scene) {
		Node bp = scene.lookup("#bPane");
		return bp;
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {

		comboBox.setItems(cBox);

		comboBox.setVisible(false);

		comboBox.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> selected, String oldItem, String newItem) {
				if (newItem != null) {

					switch (newItem) {

					case "CSS Link Selectors":
						FXMLLoader loader = new FXMLLoader();
						loader.setLocation(
								MainMenu.class.getResource("/com/commander/app/utils/WebScrapeLinkView.fxml"));
						AnchorPane anchorpane = new AnchorPane();
						try {
							anchorpane = (AnchorPane) loader.load();
						} catch (IOException e) {
							e.printStackTrace();
						}

						BorderPane borderpane = (BorderPane) getNestedPane(MainMenu.getRootPane().getScene());
						borderpane.setCenter(anchorpane);
						break;

					case "HTML Elements":
						FXMLLoader loadr = new FXMLLoader();
						loadr.setLocation(MainMenu.class.getResource("/com/commander/app/utils/WebScrapeDefine.fxml"));
						AnchorPane anchorp = new AnchorPane();
						try {
							anchorpane = (AnchorPane) loadr.load();
						} catch (IOException e) {
							e.printStackTrace();
						}

						BorderPane bpane = (BorderPane) getNestedPane(MainMenu.getRootPane().getScene());
						bpane.setCenter(anchorp);
						break;

					}
				}
			}
		});

		System.out.println("BuildPaneController initCounter value is: " + initCounter);

		if (initCounter == 1) {

		}
		if (initCounter == 2) {

		}

		initCounter++;

	}

}
		    